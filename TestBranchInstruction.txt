У вас всё готово для создания новой ветки `test` и работы с `main` как с веткой для продакшена (`prod`). Вот шаги для выполнения вашей задачи:

---

### 1. Создать ветку `test` и отправить её на GitHub
Выполните следующие команды для создания новой ветки `test` от текущей ветки `main` и загрузки её на GitHub:

```bash
git checkout -b test  # Создаёт и переключается на ветку test
git push -u origin test  # Отправляет ветку test на удалённый репозиторий и связывает её
```

Теперь у вас есть две ветки:
- `main` (для продакшена)
- `test` (для тестирования изменений)

---

### 2. Работать в ветке `test`
Вносите изменения в ветке `test`:
- После внесения изменений:
  ```bash
  git add .  # Добавляет изменения в индекс
  git commit -m "Описание изменений"  # Фиксирует изменения
  git push  # Отправляет изменения в удалённый репозиторий
  ```

---

### 3. Если изменения в `test` успешны, слить их в `main`
Когда изменения протестированы и готовы для продакшена:
```bash
git checkout main  # Переключиться на main
git merge test  # Слить изменения из test в main
git push origin main  # Отправить обновлённую ветку main на GitHub
```

---

### 4. Если изменения в `test` неудачны, откатить её к состоянию `main`
Если что-то пошло не так в ветке `test`, откатите её до состояния ветки `main`:
```bash
git checkout test  # Переключиться на ветку test
git reset --hard origin/main  # Откатить ветку test к состоянию main
git push --force  # Принудительно обновить удалённую ветку test
```

---

### 5. Проверить состояние веток на GitHub
Убедитесь, что обе ветки отображаются в удалённом репозитории. Для этого можно выполнить:
```bash
git branch -a
```

Вы должны увидеть:
```
* main
  test
  remotes/origin/main
  remotes/origin/test
```

---

Теперь у вас настроен рабочий процесс с двумя ветками: `test` для тестирования и `main` для стабильной версии. Если у вас возникнут дополнительные вопросы, дайте знать!